#!/bin/bash
# begin_generated_IBM_copyright_prolog                             
#                                                                  
# This is an automatically generated copyright prolog.             
# After initializing,  DO NOT MODIFY OR MOVE                       
# ================================================================ 
#                                                                  
# Licensed Materials - Property of IBM                             
# Blue Gene/Q                                                      
# (C) Copyright IBM Corp. 2012 All Rights Reserved                 
# US Government Users Restricted Rights - Use,                     
# duplication or disclosure restricted by GSA ADP                  
# Schedule contract with IBM Corp.                                 
#                                                                  
# This software is available to you under the                      
# GNU General Public License (GPL).                                
#                                                                  
# ================================================================ 
#                                                                  
# end_generated_IBM_copyright_prolog                               
#
#
# ramdisk/tools/bgqPopulateInitramfs.sh for BlueGene/Q Linux Distribution
#
# Author: Jay S. Bryant <jsbryant@us.ibm.com>
#
# Purpose:  This script populates the ramdisk/initramfs directory for either
#           a sandbox or at the customer site in preparation for building a 
#           ramdisk.
#


# Overload the cp command to do error checking of each requested copy.
cp()
{
	/bin/cp $@ 2>&1
	if [ $? -ne 0 ] ; then
		echo -en "\n\nERROR: An error occurred populating BGQ_INITRAMFS_PATH\n"
		echo -en "       Please correct the error and re-run BGQ_RAMDISK_PATH/tools/bgqPopulateInitramfs.sh\n"
		echo -en "       If this error was encountered during RPM installation you will need to execute\n"
		echo -en "       BGQ_RAMDISK_PATH/tools/bgqDistrofsInstall.sh to fully complete installation.\n\n"

		exit 1
	fi
}

usage () {

    #Do not need to log usage output
    LOG=0

    echo -en "\n\nUsage: $0 \n"
    echo -en "\tThis script copies files from the base RHEL distro (BGQ_DISTROFS_BASE_PATH) \n"
    echo -en "\tinto BGQ_INITRAMFS_PATH to serve as the basis for ramdisk builds.\n"
    echo -en "\tThis script takes no arguments.\n\n"

}


# Check for required arguments and do validation.
while getopts "h" flags ; do
    case "$flags" in
        h) usage
           exit 0
           ;;
        *) usage
           exit 1
           ;;

    esac
done

echo -en "\n\n######################################################################\n"
echo -en "# \n"
echo -en "# Populating BGQ_INITRAMFS_PATH\n"
echo -en "# \n"
echo -en "######################################################################\n\n"

# Just make sure that the base distro is there.  It should be if we have gotten to this 
# script, but you never know.

if [ ! -e BGQ_DISTROFS_BASE_PATH ] ; then
	echo -en "\n\n\tERROR!  Unable to find base RHEL distro BGQ_DISTROFS_BASE_PATH."
	echo -en "\n\t        Ensure that the base RHEL distro has been installed with bgqDistrofsInstall.sh"
	echo -en "\n\t        before attempting to run bgqPopulateInitramfs.sh again.\n\n"
	exit 1
fi

for DIR in "bin" "sbin" "lib64" "lib" "usr/lib" "usr/lib64" "usr/bin" "usr/sbin" ; do

        if [ ! -e BGQ_INITRAMFS_PATH/$DIR ] ; then
		mkdir -p BGQ_INITRAMFS_PATH/$DIR
	fi
done
		
CURRDIR=`pwd`

cp -af BGQ_DISTROFS_BASE_PATH/bin/bash BGQ_INITRAMFS_PATH/bin
cp -af BGQ_DISTROFS_BASE_PATH/bin/date BGQ_INITRAMFS_PATH/bin
cp -af BGQ_DISTROFS_BASE_PATH/bin/mount BGQ_INITRAMFS_PATH/bin
cp -af BGQ_DISTROFS_BASE_PATH/etc/init.d/rpcidmapd BGQ_INITRAMFS_PATH/etc/init.d
cp -af BGQ_DISTROFS_BASE_PATH/sbin/busybox BGQ_INITRAMFS_PATH/bin
cp -af BGQ_DISTROFS_BASE_PATH/sbin/switch_root BGQ_INITRAMFS_PATH/sbin
cp -af BGQ_DISTROFS_BASE_PATH/lib64/ld-*.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libblkid.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libc-*.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libdl-*.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libgcc_s-* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libgcc_s.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libm-*.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libm.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libnsl-*.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libnss_files-*.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libpci.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libpthread-*.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libresolv-*.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/librt*.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libselinux.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libsepol.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libtinfo.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libuuid.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/lib64/libz.so* BGQ_INITRAMFS_PATH/lib64
[ `ls BGQ_DISTROFS_BASE_PATH/usr/lib64/libgssglue.so.* 2> /dev/null | wc -l` -gt 0 ] && cp -af BGQ_DISTROFS_BASE_PATH/usr/lib64/libgssglue.so* BGQ_INITRAMFS_PATH/usr/lib64
[ `ls BGQ_DISTROFS_BASE_PATH/lib64/libgssglue.so.* 2> /dev/null | wc -l` -gt 0 ] && cp -af BGQ_DISTROFS_BASE_PATH/lib64/libgssglue.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/usr/lib64/libevent-*.so* BGQ_INITRAMFS_PATH/usr/lib64
cp -af BGQ_DISTROFS_BASE_PATH/usr/lib64/libnfsidmap.so* BGQ_INITRAMFS_PATH/usr/lib64
cp -af BGQ_DISTROFS_BASE_PATH/usr/lib64/libnfsidmap BGQ_INITRAMFS_PATH/usr/lib64
cp -af BGQ_DISTROFS_BASE_PATH/usr/lib64/libstdc++.so* BGQ_INITRAMFS_PATH/usr/lib64
[ `ls BGQ_DISTROFS_BASE_PATH/usr/lib64/libtirpc.so* 2> /dev/null | wc -l` -gt 0 ] && cp -af BGQ_DISTROFS_BASE_PATH/usr/lib64/libtirpc.so* BGQ_INITRAMFS_PATH/usr/lib64
[ `ls BGQ_DISTROFS_BASE_PATH/lib64/libtirpc.so* 2> /dev/null | wc -l` -gt 0 ] && cp -af BGQ_DISTROFS_BASE_PATH/lib64/libtirpc.so* BGQ_INITRAMFS_PATH/lib64
cp -af BGQ_DISTROFS_BASE_PATH/usr/bin/dc BGQ_INITRAMFS_PATH/usr/bin
cp -af BGQ_DISTROFS_BASE_PATH/usr/bin/mstflint BGQ_INITRAMFS_PATH/usr/bin
cp -af BGQ_DISTROFS_BASE_PATH/usr/sbin/rpc.idmapd BGQ_INITRAMFS_PATH/usr/sbin
cp -af BGQ_DISTROFS_BASE_PATH/sbin/consoletype BGQ_INITRAMFS_PATH/sbin
cp -af BGQ_DISTROFS_BASE_PATH/sbin/fstab-decode BGQ_INITRAMFS_PATH/sbin
cp -af BGQ_DISTROFS_BASE_PATH/sbin/ifenslave BGQ_INITRAMFS_PATH/sbin
cp -af BGQ_DISTROFS_BASE_PATH/sbin/ip	BGQ_INITRAMFS_PATH/sbin
cp -af BGQ_DISTROFS_BASE_PATH/sbin/lspci BGQ_INITRAMFS_PATH/sbin
cp -af BGQ_DISTROFS_BASE_PATH/sbin/mount.nfs BGQ_INITRAMFS_PATH/sbin
cp -af BGQ_DISTROFS_BASE_PATH/sbin/mount.nfs4 BGQ_INITRAMFS_PATH/sbin
cp -af BGQ_DISTROFS_BASE_PATH/sbin/pidof BGQ_INITRAMFS_PATH/sbin
cp -af BGQ_DISTROFS_BASE_PATH/sbin/setpci BGQ_INITRAMFS_PATH/sbin

# Still need to copy /etc/localtime from the SN to avoid setting the time with one timezone
# before moving to the right timezone.
cp /etc/localtime BGQ_INITRAMFS_PATH/etc/

# Determine which module(s) are needed for channel bonding and add those module(s) to initramfs.  Also, create 
# and copy modules.dep to initramfs.
# mkdir -p lib/modules/BGQ_LINUX_KERNEL_VERSION
TMPDIR=`mktemp -d`
pushd $TMPDIR 
rpm2cpio BGQ_LINUX_PATH/rpms/kernel-BGQ_LINUX_KERNEL_VERSION.rpm | cpio -iuvd
depmod -b `pwd` BGQ_LINUX_KERNEL_VERSION 
mkdir -p BGQ_INITRAMFS_PATH
cp -v --parents lib/modules/BGQ_LINUX_KERNEL_VERSION/modules.dep BGQ_INITRAMFS_PATH
for module in `grep bonding BGQ_INITRAMFS_PATH/lib/modules/BGQ_LINUX_KERNEL_VERSION/modules.dep | awk -F: '{ print $1 ; print $2 }'` ; do
	cp -v --parents lib/modules/BGQ_LINUX_KERNEL_VERSION/$module BGQ_INITRAMFS_PATH
done
popd
rm -rf $TMPDIR



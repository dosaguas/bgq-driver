#!/bin/sh
# begin_generated_IBM_copyright_prolog                             
#                                                                  
# This is an automatically generated copyright prolog.             
# After initializing,  DO NOT MODIFY OR MOVE                       
# ================================================================ 
#                                                                  
# Licensed Materials - Property of IBM                             
# Blue Gene/Q                                                      
# (C) Copyright IBM Corp. 2012  All Rights Reserved                 
# US Government Users Restricted Rights - Use,                     
# duplication or disclosure restricted by GSA ADP                  
# Schedule contract with IBM Corp.                                 
#                                                                  
# This software is available to you under the                      
# GNU General Public License (GPL).                                
#                                                                  
# ================================================================ 
#                                                                  
# end_generated_IBM_copyright_prolog                               
# ################################################
#
# bond0           Configures bonding on nodes where BONDOPTS have been
#                 added to the configuration service for the node.
#
# Author:         Jay S. Bryant (jsbryant@us.ibm.com) and Mike Aho (ahomike@us.ibm.com)
#

# Source function library including BG/Q env vars
. /etc/init.d/functions

RELEASE=$(uname -r)
MODULEKO=/lib/modules/$RELEASE/kernel/drivers/net/bonding/bonding.ko

function start
{

    # Make sure the module exists ... Throw a RAS event and exit if it doesn't.
    if [ ! -e $MODULEKO ] ; then
	
	bgras $BGRAS_ID_SCRIPT_FAILURE \
	      "bond0: Bonding was requested but the required module $MODULEKO could not be found."
	
	echo -n $"Interface bonding configuration: "
	failure
	echo
	exit 2
    else

        echo -en $"Configuring interface bonding for $BG_INTF0_IPV4 ...\n"

	# Try to insert the module using the customer's options.
	# Throw a RAS event and exit if insertion fails.

	#insmod $moduleko  mode=4 miimon=1000 xmit_hash_policy=layer3+4
	insmod $MODULEKO $BONDINGOPTS
	lsmod | grep "bonding" &> /dev/null
	if [ $? -ne 0 ] ; then
	    bgras $BGRAS_ID_SCRIPT_FAILURE \
		  "bond0: The module $MODULEKO failed to properly insert."

	    echo -n $"Bonding configuration: "
	    failure
	    echo
	    exit 2
	fi

	# We have the module, time to start bonding ...

	echo -en $"Configuring interface bonding for $BG_INTF0_IPV4 ...\n" 

	ifconfig eth0 down
	ifconfig eth1 down 

        #bond0 will pick up the mac address of first enslaved interface
	ifconfig bond0 $BG_INTF0_IPV4 netmask $BG_INTF0_NETMASK 
	ifconfig bond0 mtu 9000 up
	ifenslave -v bond0 eth0 eth1 

	ifconfig | grep bond0 &> /dev/null
	if [ $? -ne 0 ] ; then
	    echo -n $"Interface bonding: "
	    failure
	    echo
	    exit 2
	else
	    
	    # Let the interface come up.
	    sleep 5

            # Set up the default gateway
	    # If the customer has a BG_ALT_GATEWAY in the config service we want to use that.
            if [ ! -z $BG_ALT_GATEWAY ] ; then

            	# Make sure that the gateway has not already been set.  Just to be safe
		# in the case a customer adds their own script.
		route -n | grep $BG_ALT_GATEWAY &> /dev/null
		if [ $? -ne 0 ] ; then
                        RC=$( route add default gw $BG_ALT_GATEWAY 2>&1 )
                        if [ ! -z "$RC" ] ; then
                                bgras $BGRAS_ID_SCRIPT_FAILURE \
                                      "bond0 - Failure setting a default gateway. route returned: '$RC' .  Ensure the appropriate gateway has been set for the node via dbNetConfig.pl."
                        fi
                fi

             else

                    if [ ! -z $BG_GATEWAY ] && [ $BG_GATEWAY != "0.0.0.0" ] ; then

                        # Make sure that the gateway has not already been set.  Just to be safe
                        # in the case a customer adds their own script.
                        route -n | grep $BG_GATEWAY &> /dev/null
                        if [ $? -ne 0 ] ; then
                                RC=$( route add default gw $BG_GATEWAY 2>&1 )
                                if [ ! -z "$RC" ] ; then
                                        bgras $BGRAS_ID_SCRIPT_FAILURE \
                                              "bond0 - Failure setting a default gateway. route returned: '$RC' .  Ensure the appropriate gateway has been set in the BGQETHGATEWAY table."
                                fi
                        fi
                    fi
            fi


	    echo -n $"Interface bonding completed: "
	    success
	    echo
	    
	fi

    fi

} # End start function

function stop
{

    ifconfig bond0 down
    rmmod bonding.ko

    echo -n $"Stopping interface bonding... "
    successful
    echo

}



case "$1" in

    start)
	if [ ! -z "$BONDINGOPTS" ] ; then
	    start
	else
	    echo -n $"Interface bonding configuration: "
	    skipped
	    echo
	fi
	;;
    stop)
	if [ ! -z "$BONDINGOPTS" ] ; then
	    stop
	fi
	;;
    *)
	echo $"Usage: $0 {start|stop}"
	exit 3
	;;
esac

exit $?
